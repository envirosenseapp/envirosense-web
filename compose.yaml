services:
  postgres_db:
    image: postgres:16-alpine
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: envirosense
      POSTGRES_USER: dummy_user
      POSTGRES_PASSWORD: dummy_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dummy_user -d envirosense"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - envirosense-network

  smtp4dev:
    image: rnwood/smtp4dev
    container_name: smtp4dev
    restart: unless-stopped
    ports:
      - "5000:80"    
      - "2525:25"    
    volumes:
      - smtp4dev-data:/smtp4dev
    networks:
      - envirosense-network

  api-service:
    profiles:
      - full
    build: 
      context: .
      dockerfile: EnviroSense.API/Dockerfile
    ports:
      - "5050:8080"
    depends_on:
      postgres_db:
        condition: service_healthy
        restart: true
    networks:
      - envirosense-network
    env_file:
      - "./conf/secrets/conf.env"
    volumes:
      - "./conf/secrets/appsettings.Production.json:/etc/secrets/appsettings.Production.json"

  web-service:
    profiles:
      - full
    build: 
      context: .
      dockerfile: EnviroSense.Web/Dockerfile
    ports:
      - "5051:8080"
    depends_on:
      postgres_db:
        condition: service_healthy
        restart: true
    networks:
      - envirosense-network
    env_file:
      - "./conf/secrets/conf.env"
    volumes:
      - "./conf/secrets/appsettings.Production.json:/etc/secrets/appsettings.Production.json"

  traefik:
    profiles:
      - full
    image: "traefik:v3.5"
    container_name: "traefik"
    ports:
      - "8080:80"
      - "8081:8080"
    volumes:
      - "./conf/traefik:/etc/traefik"
    networks:
      - envirosense-network

volumes:
  postgres_data:
  smtp4dev-data:
  
networks:
  envirosense-network:
    name: envirosense-network